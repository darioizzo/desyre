// Copyright 2020, 2021, 2022 Francesco Biscani (bluescarni@gmail.com), Dario Izzo (dario.izzo@gmail.com)
//
// This file is part of the dsyre library.
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef DSYRE_GYM_H
#define DSYRE_GYM_H

#include <vector>

#include <dsyre/detail/data_generation.hpp>
#include <dsyre/detail/visibility.hpp>
#include <dsyre/gym/misc_data.hpp>
#include <dsyre/gym/nist_data.hpp>

namespace dsyre
{
namespace gym
{
// koza
DSYRE_DLL_PUBLIC void generate_P0(std::vector<std::vector<double>> &points, std::vector<double> &labels);
// from differentiable genetic programming
DSYRE_DLL_PUBLIC void generate_P1(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P2(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P3(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P4(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P5(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P6(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P7(std::vector<std::vector<double>> &points, std::vector<double> &labels);
// from PySR
DSYRE_DLL_PUBLIC void generate_P8(std::vector<std::vector<double>> &points, std::vector<double> &labels);
// From:
// Vladislavleva, Ekaterina J., Guido F. Smits, and Dick Den Hertog.
// "Order of nonlinearity as a complexity measure for models generated by symbolic regression via pareto genetic
// programming." IEEE Transactions on Evolutionary Computation 13.2 (2008): 333-349.
DSYRE_DLL_PUBLIC void generate_P9(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P10(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P11(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P12(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P13(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P14(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P15(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P16(std::vector<std::vector<double>> &points, std::vector<double> &labels);
// From NIST
DSYRE_DLL_PUBLIC void generate_P17(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P18(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P19(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P20(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P21(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P22(std::vector<std::vector<double>> &points, std::vector<double> &labels);
DSYRE_DLL_PUBLIC void generate_P23(std::vector<std::vector<double>> &points, std::vector<double> &labels);
// From Dow Corporation
DSYRE_DLL_PUBLIC void generate_P24(std::vector<std::vector<double>> &points, std::vector<double> &labels);

} // namespace gym
} // namespace dsyre

#endif